<?php
declare(strict_types=1);

namespace BetaKiller\Task\I18n;

use BetaKiller\Helper\AppEnvInterface;
use BetaKiller\I18n\I18nFacade;
use BetaKiller\Model\LanguageInterface;
use BetaKiller\Repository\TranslationKeyRepositoryInterface;
use BetaKiller\Task\AbstractTask;
use Symfony\Component\Yaml\Yaml;

final class UpdateFiles extends AbstractTask
{
    /**
     * @var \BetaKiller\Helper\AppEnvInterface
     */
    private $appEnv;

    /**
     * @var \BetaKiller\I18n\I18nFacade
     */
    private $facade;

    /**
     * @var \BetaKiller\Repository\TranslationKeyRepositoryInterface
     */
    private $keyRepo;

    /**
     * UpdateFiles constructor.
     *
     * @param \BetaKiller\Helper\AppEnvInterface                       $appEnv
     * @param \BetaKiller\I18n\I18nFacade                              $facade
     * @param \BetaKiller\Repository\TranslationKeyRepositoryInterface $keyRepo
     */
    public function __construct(
        AppEnvInterface $appEnv,
        I18nFacade $facade,
        TranslationKeyRepositoryInterface $keyRepo
    ) {
        parent::__construct();

        $this->appEnv  = $appEnv;
        $this->facade  = $facade;
        $this->keyRepo = $keyRepo;
    }

    /**
     * @inheritDoc
     */
    public function defineOptions(): array
    {
        return [
            // Use DB as a primary source
            'force' => false,
        ];
    }

    public function run(): void
    {
        $force = $this->getOption('force', false) !== false;

        // Merge or override
        $keys = $force
            ? $this->keyRepo->getAll()
            : $this->facade->getAllTranslationKeys();

        foreach ($this->facade->getAllowedLanguages() as $lang) {
            $data = [];

            foreach ($keys as $key) {
                // Skip missing values
                if (!$key->hasI18nValue($lang)) {
                    continue;
                }

                $name  = $key->getI18nKeyName();
                $value = $key->getI18nValue($lang);

                // Prepare value
                $value = \str_replace("\r\n", "\n", $value);

                $data[$name] = $value;
            }

            $this->storeData($lang, $data);
        }
    }

    private function storeData(LanguageInterface $lang, array $data): void
    {
        $isoCode = $lang->getIsoCode();

        $path = implode(\DIRECTORY_SEPARATOR, [
            $this->appEnv->getAppRootPath(),
            'i18n',
            sprintf('%s.yml', $isoCode),
        ]);

//        $phpContent = sprintf(
//            "<?php\n\n/* autogenerated %s */\n\nreturn %s;\n",
//            $isoCode,
//            \var_export($data, true)
//        );
//
//        \file_put_contents($path, $phpContent, \LOCK_EX);

        $yamlContent = Yaml::dump($data, 2, 2, Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK);

        \file_put_contents($path, $yamlContent, \LOCK_EX);
    }
}
